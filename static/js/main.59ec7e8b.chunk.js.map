{"version":3,"sources":["redux/constants.js","redux/store.js","components/calendar/Month.js","components/calendar/Months.js","components/DateForm.js","components/EventForm.js","App.js","index.js"],"names":["currentDate","Date","daysNames","namesOfMonths","availableYears","i","getFullYear","push","years","getYear","state","year","getMonth","month","getDay","day","getWeek","week","getEvents","events","getIsShownEventForm","isShownEventForm","getEventSelectorValue","eventSelectorValue","setYear","type","setMonth","setDay","setWeek","setIsShownEventForm","isShown","initialState","store","createStore","action","id","date","title","mark","selector","connect","currentMonthOfYear","firstDay","currentDay","emptyDays","currentMonth","name","dayOfMonths","tempDate","setDate","getDate","openEventForm","dayNumber","monthNumber","getId","toString","className","map","dayName","slice","length","onClick","find","elem","filter","includes","ev","cn","Months","setEventSelectorValue","setters","handleSelect","key","value","target","onChange","event","required","oneYear","oneMonth","oneWeek","setEvents","useState","setTitle","setMark","onSubmit","preventDefault","placeholder","htmlFor","mapDispatchToProps","changeMonth","param","datePlus","dateMinus","changeYear","changeWeek","disabled","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.59ec7e8b.chunk.js","sourcesContent":["export const currentDate = new Date();\r\nexport const daysNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nexport const namesOfMonths = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\n\r\nconst availableYears = [];\r\n\r\nfor (let i = 1800; i <= currentDate.getFullYear() + 100; i += 1) {\r\n    availableYears.push(i);\r\n}\r\n\r\nexport const years = [...availableYears];\r\n","import { createStore } from 'redux';\r\nimport { currentDate } from './constants';\r\n\r\nexport const SET_YEAR = 'SET_YEAR';\r\nexport const SET_MONTH = 'SET_MONTH';\r\nexport const SET_DAY = 'SET_DAY';\r\nexport const SET_WEEK = 'SET_WEEK';\r\nexport const SET_EVENTS = 'SET_EVENTS';\r\nexport const SET_IS_SHOWN_EVENT_FORM = 'SET_IS_SHOWN_EVENT_FORM';\r\nexport const SET_EVENT_SELECTOR_VALUE = 'SET_EVENT_SELECTOR_VALUE';\r\n\r\nexport const getYear = state => state.year;\r\nexport const getMonth = state => state.month;\r\nexport const getDay = state => state.day;\r\nexport const getWeek = state => state.week;\r\nexport const getEvents = state => state.events;\r\nexport const getIsShownEventForm = state => state.isShownEventForm;\r\nexport const getEventSelectorValue = state => state.eventSelectorValue;\r\n\r\nexport const setYear = year => ({\r\n    type: SET_YEAR,\r\n    year,\r\n});\r\n\r\nexport const setMonth = month => ({\r\n    type: SET_MONTH,\r\n    month,\r\n});\r\n\r\nexport const setDay = day => ({\r\n    type: SET_DAY,\r\n    day,\r\n});\r\n\r\nexport const setWeek = week => ({\r\n    type: SET_WEEK,\r\n    week,\r\n});\r\n\r\nexport const setEvents = (date, title, mark) => ({\r\n    type: SET_EVENTS,\r\n    date,\r\n    title,\r\n    mark,\r\n});\r\n\r\nexport const setIsShownEventForm = isShown => ({\r\n    type: SET_IS_SHOWN_EVENT_FORM,\r\n    isShown,\r\n});\r\n\r\nexport const setEventSelectorValue = selector => ({\r\n    type: SET_EVENT_SELECTOR_VALUE,\r\n    selector,\r\n});\r\n\r\nconst initialState = {\r\n    year: currentDate.getFullYear(),\r\n    month: '',\r\n    day: '',\r\n    week: '',\r\n    events: [],\r\n    isShownEventForm: false,\r\n    eventSelectorValue: '',\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case SET_YEAR:\r\n            return {\r\n                ...state,\r\n                year: action.year,\r\n            };\r\n        case SET_MONTH:\r\n            return {\r\n                ...state,\r\n                month: action.month === '' ? '' : +action.month,\r\n            };\r\n        case SET_DAY:\r\n            return {\r\n                ...state,\r\n                day: action.day,\r\n            };\r\n        case SET_WEEK:\r\n            return {\r\n                ...state,\r\n                week: action.week === '' ? '' : +action.week,\r\n            };\r\n        case SET_EVENTS:\r\n            return {\r\n                ...state,\r\n                events: [\r\n                    ...state.events,\r\n                    {\r\n                        id: action.date,\r\n                        title: action.title,\r\n                        mark: action.mark,\r\n                    },\r\n                ],\r\n            };\r\n        case SET_IS_SHOWN_EVENT_FORM:\r\n            return {\r\n                ...state,\r\n                isShownEventForm: action.isShown,\r\n            };\r\n        case SET_EVENT_SELECTOR_VALUE:\r\n            return {\r\n                ...state,\r\n                eventSelectorValue: action.selector,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const store = createStore(reducer, initialState);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport cn from 'classnames';\r\nimport { getDay, getMonth, getYear, getWeek, getIsShownEventForm, setIsShownEventForm, setDay, getEvents, getEventSelectorValue, setMonth } from '../../redux/store';\r\nimport { namesOfMonths, daysNames } from '../../redux/constants';\r\n\r\nconst Month = ({ month, year, week, setDay, setIsShownEventForm, events, eventSelectorValue, setMonth }) => {\r\n    const firstDay = new Date(year, month);\r\n    const currentDay = firstDay.getDay();\r\n    const emptyDays = [];\r\n\r\n    for (let i = 0; i < currentDay; i += 1) {\r\n        emptyDays.push('');\r\n    }\r\n\r\n    const currentMonth = firstDay.getMonth();\r\n    const name = namesOfMonths[currentMonth];\r\n    const dayOfMonths = [];\r\n    const tempDate = firstDay;\r\n\r\n    for (let i = 1; i <= 31; i += 1) {\r\n        if (tempDate.getMonth() === month) {\r\n            dayOfMonths.push(i);\r\n        }\r\n        tempDate.setDate(tempDate.getDate() + 1);\r\n    }\r\n\r\n    const openEventForm = (dayNumber, monthNumber) => {\r\n        setMonth(monthNumber);\r\n        setDay(dayNumber);\r\n        setIsShownEventForm(true);\r\n    };\r\n\r\n    const getId = (day) => {\r\n        const id = new Date(year, month, day);\r\n        return id.toString();\r\n    };\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <caption className=\"table__caption\">\r\n                {name}\r\n            </caption>\r\n            <thead>\r\n            <tr className=\"table__caption--days\">\r\n                {daysNames.map(dayName => <th>{dayName}</th>)}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr>\r\n                {(week === 0 || week === '') && emptyDays\r\n                    .map(day => <td className=\"table__td table__td--empty\">{day}</td>)}\r\n                {(week === 0 || week === '') && dayOfMonths\r\n                    .slice(0, 7 - emptyDays.length)\r\n                    .map(day => (\r\n                        <td\r\n                            className=\"table__td\"\r\n                            onClick={() => openEventForm(day, month)}\r\n                        >\r\n                            <div className=\"wrapper__td\">\r\n                                {day}\r\n                            </div>\r\n                            <ul>\r\n                                {events.find(elem => elem.id === getId(day))\r\n                                && events\r\n                                    .filter(elem => elem.id === getId(day && elem.mark.includes(eventSelectorValue)\r\n                                    ))\r\n                                    .map(ev => (\r\n                                        <li className={cn(\r\n                                            'table__li',\r\n                                            { 'table__li--necessary': ev.mark === 'necessary' },\r\n                                            { 'table__li--important': ev.mark === 'important' },\r\n                                            { 'table__li--meeting ': ev.mark === 'meeting' },\r\n                                        )}\r\n                                        >\r\n                                            {ev.title}\r\n                                        </li>\r\n                                    ))}\r\n                            </ul>\r\n                        </td>\r\n                    ))}\r\n            </tr>\r\n            <tr>\r\n                {(week === 1 || week === '') && dayOfMonths\r\n                    .slice(7 - emptyDays.length, 14 - emptyDays.length)\r\n                    .map(day => (\r\n                        <td\r\n                            className=\"table__td\"\r\n                            onClick={() => openEventForm(day, month)}\r\n                        >\r\n                            <div className=\"wrapper__td\">\r\n                                {day}\r\n                            </div>\r\n                            <ul>\r\n                                {events.find(elem => elem.id === getId(day))\r\n                                && events\r\n                                    .filter(elem => elem.id === getId(day) && elem.mark.includes(eventSelectorValue)\r\n                                    )\r\n                                    .map(ev => (\r\n                                        <li className={cn(\r\n                                            'table__li',\r\n                                            { 'table__li--necessary': ev.mark === 'necessary' },\r\n                                            { 'table__li--important': ev.mark === 'important' },\r\n                                            { 'table__li--meeting ': ev.mark === 'meeting' },\r\n                                        )}\r\n                                        >\r\n                                            {ev.title}\r\n                                        </li>\r\n                                    ))}\r\n                            </ul>\r\n                        </td>\r\n                    ))}\r\n            </tr>\r\n            <tr>\r\n                {(week === 2 || week === '') && dayOfMonths\r\n                    .slice(14 - emptyDays.length, 21 - emptyDays.length)\r\n                    .map(day => (\r\n                        <td\r\n                            className=\"table__td\"\r\n                            onClick={() => openEventForm(day, month)}\r\n                        >\r\n                            <div className=\"wrapper__td\">\r\n                                {day}\r\n                            </div>\r\n                            <ul>\r\n                                {events.find(elem => elem.id === getId(day))\r\n                                && events\r\n                                    .filter(elem => elem.id === getId(day) && elem.mark.includes(eventSelectorValue)\r\n                                    )\r\n                                    .map(ev => (\r\n                                        <li className={cn(\r\n                                            'table__li',\r\n                                            { 'table__li--necessary': ev.mark === 'necessary' },\r\n                                            { 'table__li--important': ev.mark === 'important' },\r\n                                            { 'table__li--meeting ': ev.mark === 'meeting' },\r\n                                        )}\r\n                                        >\r\n                                            {ev.title}\r\n                                        </li>\r\n                                    ))}\r\n                            </ul>\r\n                        </td>\r\n                    ))}\r\n            </tr>\r\n            <tr>\r\n                {(week === 3 || week === '') && dayOfMonths\r\n                    .slice(21 - emptyDays.length, 28 - emptyDays.length)\r\n                    .map(day => (\r\n                        <td\r\n                            className=\"table__td\"\r\n                            onClick={() => openEventForm(day, month)}\r\n                        >\r\n                            <div className=\"wrapper__td\">\r\n                                {day}\r\n                            </div>\r\n                            <ul>\r\n                                {events.find(elem => elem.id === getId(day))\r\n                                && events\r\n                                    .filter(elem => elem.id === getId(day) && elem.mark.includes(eventSelectorValue)\r\n                                    )\r\n                                    .map(ev => (\r\n                                        <li className={cn(\r\n                                            'table__li',\r\n                                            { 'table__li--necessary': ev.mark === 'necessary' },\r\n                                            { 'table__li--important': ev.mark === 'important' },\r\n                                            { 'table__li--meeting ': ev.mark === 'meeting' },\r\n                                        )}\r\n                                        >\r\n                                            {ev.title}\r\n                                        </li>\r\n                                    ))}\r\n                            </ul>\r\n                        </td>\r\n                    ))}\r\n            </tr>\r\n            <tr>\r\n                {(week === 4 || week === '') && dayOfMonths\r\n                    .slice(28 - emptyDays.length, 35 - emptyDays.length)\r\n                    .map(day => (\r\n                        <td\r\n                            className=\"table__td\"\r\n                            onClick={() => openEventForm(day, month)}\r\n                        >\r\n                            <div className=\"wrapper__td\">\r\n                                {day}\r\n                            </div>\r\n                            <ul>\r\n                                {events.find(elem => elem.id === getId(day))\r\n                                && events\r\n                                    .filter(elem => elem.id === getId(day) && elem.mark.includes(eventSelectorValue)\r\n                                    )\r\n                                    .map(ev => (\r\n                                        <li className={cn(\r\n                                            'table__li',\r\n                                            { 'table__li--necessary': ev.mark === 'necessary' },\r\n                                            { 'table__li--important': ev.mark === 'important' },\r\n                                            { 'table__li--meeting ': ev.mark === 'meeting' },\r\n                                        )}\r\n                                        >\r\n                                            {ev.title}\r\n                                            </li>))}\r\n                            </ul>\r\n                        </td>\r\n                    ))}\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    year: getYear(state),\r\n    currentMonthOfYear: getMonth(state),\r\n    day: getDay(state),\r\n    week: getWeek(state),\r\n    isShownEventForm: getIsShownEventForm(state),\r\n    events: getEvents(state),\r\n    eventSelectorValue: getEventSelectorValue(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, { setIsShownEventForm, setDay, setMonth })(Month);\r\n","import React from 'react';\r\nimport Month from './Month';\r\n\r\nexport const Months = () => {\r\n    const months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\n\r\n    return (\r\n        months.map(month => (\r\n            <Month month={month} />\r\n        ))\r\n    );\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    getDay, getMonth, getYear, setYear, setDay, setMonth, getWeek, setWeek,\n    setEventSelectorValue, getEventSelectorValue,\n} from '../redux/store';\nimport { namesOfMonths, years } from '../redux/constants';\n\nconst DateForm = ({\n                      year,\n                      month,\n                      week,\n                      eventSelectorValue,\n                      setYear,\n                      setMonth,\n                      setDay,\n                      setWeek,\n                      setEventSelectorValue,\n                  }) => {\n    const setters = {\n        year: setYear,\n        month: setMonth,\n        day: setDay,\n        week: setWeek,\n        eventSelectorValue: setEventSelectorValue,\n    };\n\n  const handleSelect = ({ target: { value } }, key) => {\n      setters[key](value);\n  };\n\n  return (\n      <header className=\"header\">\n          <select\n              className=\"header__select\"\n              value={year}\n              onChange={event => handleSelect(event, 'year')}\n              required\n          >\n              <option value=\"\">select year</option>\n              {years.map(oneYear => (\n                  <option value={oneYear} key={oneYear}>{oneYear}</option>\n              ))}\n          </select>\n          <select\n              className=\"header__select\"\n              value={month}\n              onChange={event => handleSelect(event, 'month')}\n              required\n          >\n              <option value=\"\">all months</option>\n              {namesOfMonths.map((oneMonth, i) => (\n                  <option value={i} key={oneMonth}>{oneMonth}</option>\n              ))}\n          </select>\n          <select\n              className=\"header__select\"\n              value={week}\n              onChange={event => handleSelect(event, 'week')}\n              required\n          >\n              <option value=\"\">all weeks</option>\n              {[0, 1, 2, 3, 4].map(oneWeek => (\n                  <option value={oneWeek} key={oneWeek}>{oneWeek + 1}</option>\n              ))}\n          </select>\n          ​\n          <select\n              className=\"header__select\"\n              value={eventSelectorValue}\n              onChange={event => handleSelect(event, 'eventSelectorValue')}\n              required\n          >\n              <option value=\"\">all</option>\n              {['necessary', 'important', 'meeting'].map(selector => (\n                  <option value={selector} key={selector}>{selector}</option>\n              ))}\n          </select>\n      </header>\n  );\n};\n\nconst mapStateToProps = state => ({\n    year: getYear(state),\n    month: getMonth(state),\n    day: getDay(state),\n    week: getWeek(state),\n    eventSelectorValue: getEventSelectorValue(state),\n});\n\nexport default connect(mapStateToProps,\n    {\n        setYear,\n        setMonth,\n        setDay,\n        setWeek,\n        setEventSelectorValue,\n    })(DateForm);\n\nDateForm.propTypes = {\n    year: (PropTypes.number || PropTypes.string).isRequired,\n    month: (PropTypes.number || PropTypes.string).isRequired,\n    week: (PropTypes.number || PropTypes.string).isRequired,\n    eventSelectorValue: PropTypes.string.isRequired,\n    setYear: PropTypes.func.isRequired,\n    setMonth: PropTypes.func.isRequired,\n    setDay: PropTypes.func.isRequired,\n    setWeek: PropTypes.func.isRequired,\n    setEventSelectorValue: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getYear, getMonth, getDay, getEvents,\r\n    setEvents, setIsShownEventForm } from '../redux/store';\r\n\r\nconst EventForm = ({\r\n                       year,\r\n                       month,\r\n                       day,\r\n                       setEvents,\r\n                       setIsShownEventForm,\r\n                   }) => {\r\n    const [title, setTitle] = useState('');\r\n    const [mark, setMark] = useState('');\r\n\r\n  const handleTitleChange = ({ target: { value } }) => {\r\n      setTitle(value);\r\n  };\r\n\r\n  const handleSelect = ({ target: { value } }) => {\r\n      setMark(value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n\r\n    const date = new Date(year, month, day);\r\n\r\n    setEvents(date.toString(), title, mark);\r\n      setIsShownEventForm(false);\r\n      setTitle('');\r\n      setMark('');\r\n  };\r\n\r\n  const goBack = () => {\r\n      setTitle('');\r\n      setMark('');\r\n      setIsShownEventForm(false);\r\n  };\r\n\r\n  return (\r\n      <div className=\"wrapper\">\r\n          <form onSubmit={handleSubmit} className=\"form\">\r\n              <div>\r\n                  <input\r\n                      type=\"text\"\r\n                      value={title}\r\n                      placeholder=\"Enter event title\"\r\n                      onChange={handleTitleChange}\r\n                      required\r\n                  />\r\n              </div>\r\n              <div className=\"form__radio\">\r\n                  <input\r\n                      type=\"radio\"\r\n                      name=\"mark\"\r\n                      value=\"necessary\"\r\n                      id=\"necessary\"\r\n                      required={mark === ''}\r\n                      onChange={event => handleSelect(event)}\r\n                  />\r\n                  <label htmlFor=\"necessary\">Necessary</label>\r\n                  <input\r\n                      type=\"radio\"\r\n                      name=\"mark\"\r\n                      value=\"important\"\r\n                      id=\"important\"\r\n                      required={mark === ''}\r\n                      onChange={event => handleSelect(event)}\r\n                  />\r\n                  <label htmlFor=\"important\">Important</label>\r\n                  <input\r\n                      type=\"radio\"\r\n                      name=\"mark\"\r\n                      value=\"meeting\"\r\n                      id=\"meeting\"\r\n                      required={mark === ''}\r\n                      onChange={event => handleSelect(event)}\r\n                  />\r\n                  <label htmlFor=\"meeting\">Meeting</label>\r\n              </div>\r\n              <button\r\n                  type=\"button\"\r\n                  onClick={goBack}\r\n              >\r\n                  Go back\r\n              </button>\r\n              <button type=\"submit\">Add event</button>\r\n          </form>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    year: getYear(state),\r\n    month: getMonth(state),\r\n    day: getDay(state),\r\n    events: getEvents(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    setEvents,\r\n    setIsShownEventForm,\r\n})(EventForm);\r\n\r\nEventForm.propTypes = {\r\n    year: (PropTypes.number || PropTypes.string).isRequired,\r\n    month: (PropTypes.number || PropTypes.string).isRequired,\r\n    day: (PropTypes.number || PropTypes.string).isRequired,\r\n    setEvents: PropTypes.func.isRequired,\r\n    setIsShownEventForm: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport { Months } from './components/calendar/Months';\nimport Month from './components/calendar/Month';\nimport DateForm from './components/DateForm';\nimport EventForm from './components/EventForm';\nimport {\n    getYear,\n    getMonth,\n    setMonth,\n    setYear,\n    setWeek,\n    getWeek,\n    getIsShownEventForm,\n} from './redux/store';\n\nconst App = ({\n                 year,\n                 month,\n                 week,\n                 setMonth,\n                 setYear,\n                 setWeek,\n                 isShownEventForm,\n             }) => {\n    const changeMonth = (param) => {\n        const datePlus = new Date(year, month + 1);\n        const dateMinus = new Date(year, month - 1);\n        const tempDate = param === -1 ? dateMinus : datePlus;\n\n    setYear(tempDate.getFullYear());\n        setMonth(tempDate.getMonth());\n    };\n\n  const changeYear = (param) => {\n      setYear(param === 1 ? year + 1 : year - 1);\n  };\n\n  const changeWeek = (param) => {\n      if (param === 1) {\n          setWeek(week === 4 ? 0 : week + 1);\n      } else {\n          setWeek(week === 0 ? 4 : week - 1);\n      }\n  };\n\n  return (\n      <>\n          {isShownEventForm\n              ? <EventForm />\n              : (\n                  <>\n                      <DateForm />\n                      <div className=\"buttons\">\n                          <button\n                              className=\"buttons__prevYear\"\n                              type=\"button\"\n                              onClick={() => changeYear(-1)}\n                              disabled={year === ''}\n                          >\n                              prevYear\n                          </button>\n                          {(year !== '' && (month || month === 0)) && (\n                              <button\n                                  className=\"buttons__prevMonth\"\n                                  type=\"button\"\n                                  onClick={() => changeMonth(-1)}\n                              >\n                                  prevMonth\n                              </button>\n                          )}\n                          {(year !== '' && (week || week === 0))  && (\n                              <button\n                                  className=\"buttons__prevWeek\"\n                                  type=\"button\"\n                                  onClick={() => changeWeek(-1)}\n                              >\n                                  prevWeek\n                              </button>\n                          )}\n                          {(year !== '' && (week || week === 0)) && (\n                              <button\n                                  className=\"buttons__nextWeek\"\n                                  type=\"button\"\n                                  onClick={() => changeWeek(1)}\n                              >\n                                  nextWeek\n                              </button>\n                          )}\n                          {(year !== '' && (month || month === 0)) && (\n                              <button\n                                  className=\"buttons__nextMonth\"\n                                  type=\"button\"\n                                  onClick={() => changeMonth(1)}\n                              >\n                                  nextMonth\n                              </button>\n                          )}\n                          <button\n                              className=\"buttons__nextYear\"\n                              type=\"button\"\n                              onClick={() => changeYear(1)}\n                              disabled={year === ''}\n                          >\n                              nextYear\n                          </button>\n                      </div>\n                      {year !== '' && month === '' && (\n                          <div className=\"App\">\n                              <Months />\n                          </div>\n                      )}\n                      {(year !== '' && (month || month === 0)) && <Month month={month} />}\n                  </>\n              )}\n      </>\n  );\n};\n\nconst mapStateToProps = state => ({\n    year: getYear(state),\n    month: getMonth(state),\n    week: getWeek(state),\n    setMonth: getMonth(state),\n    setYear: getYear(state),\n    setWeek: getWeek(state),\n    isShownEventForm: getIsShownEventForm(state),\n});\n\nconst mapDispatchToProps = {\n    setMonth,\n    setYear,\n    setWeek,\n};\n\nApp.propTypes = {\n    year: (PropTypes.number || PropTypes.string).isRequired,\n    month: (PropTypes.number || PropTypes.string).isRequired,\n    week: (PropTypes.number || PropTypes.string).isRequired,\n    setMonth: PropTypes.func.isRequired,\n    setYear: PropTypes.func.isRequired,\n    setWeek: PropTypes.func.isRequired,\n    isShownEventForm: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './redux/store';\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement,\n);\n"],"sourceRoot":""}